@page "/lector"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorBarcodeScanner.ZXing.JS
@inject IRepositorio repositorio
@attribute [Authorize]

@if (mostrarMensaje)
{
    <hr />
    <div class="alert alert-@tipoMensaje" role="alert">
        @mensaje
    </div>
}

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader @ref="_reader"
                                             Title="Lector de Dni"
                                             StartCameraAutomatically="false"
                                             ShowStart="false"
                                             ShowReset="false"
                                             ShowToggleTorch="false"
                                             ShowVideoDeviceList="true"
                                             ShowResult="false"
                                             OnBarcodeReceived="LocalReceivedBarcodeText" />

<button @onclick="@(() => LeerDni())" class="btn btn-primary">Leer Dni</button>
<button @onclick="@(() => CerrarLector())" class="btn btn-warning">Cerrar Cámara</button>

@*<input @bind="LocalBarcodeText" readonly class="form-control" />*@

@code {
    private BarcodeReader _reader;
    private string url = "https://localhost:44300/", LocalBarcodeText, tipoMensaje, mensaje;
    private DatosDni DatosDni;
    private bool mostrarMensaje = false, camaraAbierta = false;
    private int errorAlLeer = 0;
    [Inject]
    protected IJSRuntime ijsRuntime { get; set; }

    private async void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        this.LocalBarcodeText = args.BarcodeText;
        StateHasChanged();

        string[] datos = LocalBarcodeText.Split('@');

        if (datos.Length == 8)
        {
            DatosDni = new DatosDni
            {
                NroTramite = datos[0],
                Apellido = datos[1],
                Nombre = datos[2],
                Sexo = datos[3],
                Dni = datos[4],
                Ejemplar = datos[5],
                FechaNacimiento = datos[6],
                FechaEmision = datos[7],
                Dato = ""
            };
        }
        else if (datos.Length == 9)
        {
            DatosDni = new DatosDni
            {
                NroTramite = datos[0],
                Apellido = datos[1],
                Nombre = datos[2],
                Sexo = datos[3],
                Dni = datos[4],
                Ejemplar = datos[5],
                FechaNacimiento = datos[6],
                FechaEmision = datos[7],
                Dato = datos[8]
            };
        }
        else if (datos.Length == 16)
        {
            DatosDni = new DatosDni
            {
                NroTramite = datos[9],
                Apellido = datos[3],
                Nombre = datos[4],
                Sexo = datos[7],
                Dni = datos[0],
                Ejemplar = datos[1],
                FechaNacimiento = datos[6],
                FechaEmision = datos[8],
                Dato = ""
            };
        }

        var httpResponse = await repositorio.Post<DatosDni, DatosDni>("api/LeerDni", DatosDni);

        if (!httpResponse.Error)
        {
            //Mostrar Mensaje lectura correcta
            mostrarMensaje = true;
            tipoMensaje = "success";
            mensaje = "Dni de " + DatosDni.Nombre + " leido correctamente";
            errorAlLeer = 0;
        }
        else
        {
            //Mostrar Mensaje lectura incorrecta
            mostrarMensaje = true;
            tipoMensaje = "danger";
            mensaje = "Error al Leer el dni(" + errorAlLeer + ")";
            errorAlLeer += 1;
        }
    }

    private async void LeerDni()
    {
        _reader.StartDecoding();
    }

    private async void CerrarLector()
    {
        _reader.StopDecoding();
        mostrarMensaje = false;
    }
}
